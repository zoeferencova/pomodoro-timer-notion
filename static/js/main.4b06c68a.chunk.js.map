{"version":3,"sources":["sounds/pomodoro-alarm.mp3","Tab/Tab.js","TabBar/TabBar.js","Controls/Controls.js","Widget/Widget.js","App.js","reportWebVitals.js","index.js"],"names":["Tab","props","className","onClick","e","changeTab","tabName","time","TabBar","Controls","type","handleRestart","timerOn","handlePause","handleStart","alarm","Audio","alarmSound","Widget","clockRef","current","stop","setState","currentTab","handleCompletion","play","start","pause","pausedTime","calcTimeDelta","total","createRef","state","pomodoros","this","date","Date","now","autoStart","controlled","renderer","minutes","zeroPad","seconds","ref","onComplete","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAAe,MAA0B,2C,eCU1BA,EARH,SAACC,GACX,OACE,qBAAKC,UAAU,MAAMC,QAAS,SAAAC,GAAC,OAAIH,EAAMI,UAAUJ,EAAMK,QAASL,EAAMM,OAAxE,SACE,+BAAON,EAAMK,aCSJE,G,MAVA,SAAAP,GACb,OACE,sBAAKC,UAAU,UAAf,UACE,cAAC,EAAD,CAAKI,QAAQ,WAAWC,KAAM,KAASF,UAAWJ,EAAMI,YACxD,cAAC,EAAD,CAAKC,QAAQ,cAAcC,KAAM,IAAQF,UAAWJ,EAAMI,YAC1D,cAAC,EAAD,CAAKC,QAAQ,aAAaC,KAAM,IAAQF,UAAWJ,EAAMI,iBCOhDI,G,MAdE,SAAAR,GACf,OACE,gCACE,wBAAQS,KAAK,SAASR,UAAU,iBAAiBC,QAASF,EAAMU,cAAhE,qBAGA,wBAAQD,KAAK,SAASR,UAAU,qBAAqBC,QAASF,EAAMW,QAAUX,EAAMY,YAAcZ,EAAMa,YAAxG,SACGb,EAAMW,QAAU,QAAU,eCA/BG,G,MAAQ,IAAIC,MAAMC,IA6DPC,E,kDA1Db,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAYRI,UAAY,SAACC,EAASC,GACpB,EAAKY,SAASC,QAAQC,OACtB,EAAKC,SAAS,CAAEV,SAAS,EAAOW,WAAY,CAACjB,UAASC,WAfrC,EAkBnBiB,iBAAmB,WACjB,EAAKF,SAAS,CAAEV,SAAS,IACzBG,EAAMU,QApBW,EAuBnBX,YAAc,WACZ,EAAKK,SAASC,QAAQM,QACtB,EAAKJ,SAAS,CAAEV,SAAS,KAzBR,EA4BnBC,YAAc,WACZ,EAAKM,SAASC,QAAQO,QACtB,IAAMC,EAAa,EAAKT,SAASC,QAAQS,gBAAgBC,MACzD,EAAKR,SAAS,CAAEV,SAAS,EAAOW,WAAY,CAAEhB,KAAMqB,MA/BnC,EAkCnBjB,cAAgB,WACd,EAAKQ,SAASC,QAAQC,OACtB,EAAKC,SAAS,CAAEV,SAAS,IACzB,EAAKO,SAASC,QAAQM,SAnCtB,EAAKP,SAAWY,sBAChB,EAAKC,MAAQ,CACXT,WAAY,CACVjB,QAAS,WACTC,KAAM,KAERK,SAAS,EACTqB,UAAW,GATI,E,0CAwCnB,WACE,OACE,sBAAK/B,UAAU,SAAf,UACE,cAAC,EAAD,CAAQqB,WAAYW,KAAKF,MAAMT,WAAWjB,QAASD,UAAW6B,KAAK7B,YACnE,cAAC,IAAD,CACE8B,KAAMC,KAAKC,MAASH,KAAKF,MAAMT,WAAWhB,KAC1C+B,WAAW,EACXC,YAAY,EACZC,SAAU,SAACvC,GAAD,OAAW,gCAAMA,EAAMwC,QAAZ,IAAsBC,YAAQzC,EAAM0C,aACzDC,IAAKV,KAAKf,SACV0B,WAAYX,KAAKV,mBAEnB,cAAC,EAAD,CAAUZ,QAASsB,KAAKF,MAAMpB,QAASC,YAAaqB,KAAKrB,YAAaC,YAAaoB,KAAKpB,YAAaH,cAAeuB,KAAKvB,uB,GArD5GmC,aCANC,MARf,WACE,OACE,qBAAK7C,UAAU,MAAf,SACE,cAAC,EAAD,OCMS8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4b06c68a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pomodoro-alarm.f968a6d0.mp3\";","import './Tab.css';\n\nconst Tab = (props) => {\n  return (\n    <div className=\"tab\" onClick={e => props.changeTab(props.tabName, props.time)}>\n      <span>{props.tabName}</span>\n    </div>\n  );\n}\n\nexport default Tab;","import Tab from '../Tab/Tab';\n\nimport './TabBar.css';\n\nconst TabBar = props => {\n  return (\n    <div className=\"tab-bar\">\n      <Tab tabName=\"Pomodoro\" time={1500000} changeTab={props.changeTab} />\n      <Tab tabName=\"Short Break\" time={300000} changeTab={props.changeTab} />\n      <Tab tabName=\"Long Break\" time={900000} changeTab={props.changeTab} />\n    </div>\n  );\n}\n\nexport default TabBar;","import './Controls.css';\n\nconst Controls = props => {\n  return (\n    <div>\n      <button type=\"submit\" className=\"restart-button\" onClick={props.handleRestart}>\n        Restart\n      </button>\n      <button type=\"submit\" className=\"start-pause-button\" onClick={props.timerOn ? props.handlePause : props.handleStart}>\n        {props.timerOn ? \"Pause\" : \"Start\"}\n      </button>\n    </div>\n    \n  );\n}\n\nexport default Controls;","import { Component, createRef } from 'react';\nimport Countdown, { zeroPad } from 'react-countdown';\nimport alarmSound from '../sounds/pomodoro-alarm.mp3';\n\nimport TabBar from '../TabBar/TabBar';\nimport Controls from '../Controls/Controls';\n\nimport './Widget.css';\n\nlet alarm = new Audio(alarmSound);\n\nclass Widget extends Component {\n  constructor(props) {\n    super(props);\n    this.clockRef = createRef();\n    this.state = {\n      currentTab: {\n        tabName: \"pomodoro\",\n        time: 2000\n      },\n      timerOn: false,\n      pomodoros: 0,\n    }\n  }\n\n  changeTab = (tabName, time) => {\n    this.clockRef.current.stop();\n    this.setState({ timerOn: false, currentTab: {tabName, time} });\n  }\n\n  handleCompletion = () => {\n    this.setState({ timerOn: false })\n    alarm.play();\n  }\n\n  handleStart = () => {\n    this.clockRef.current.start();\n    this.setState({ timerOn: true });\n  };\n\n  handlePause = () => {\n    this.clockRef.current.pause();\n    const pausedTime = this.clockRef.current.calcTimeDelta().total;\n    this.setState({ timerOn: false, currentTab: { time: pausedTime } });\n  };\n\n  handleRestart = () => {\n    this.clockRef.current.stop();\n    this.setState({ timerOn: false });\n    this.clockRef.current.start();\n  }\n\n  render() {\n    return (\n      <div className=\"widget\">\n        <TabBar currentTab={this.state.currentTab.tabName} changeTab={this.changeTab} />\n        <Countdown \n          date={Date.now() + (this.state.currentTab.time)} \n          autoStart={false} \n          controlled={false} \n          renderer={(props) => <div>{props.minutes}:{zeroPad(props.seconds)}</div>} \n          ref={this.clockRef}\n          onComplete={this.handleCompletion}>\n        </Countdown>\n        <Controls timerOn={this.state.timerOn} handlePause={this.handlePause} handleStart={this.handleStart} handleRestart={this.handleRestart} />\n      </div>\n    );\n  }\n}\n\nexport default Widget;\n\n\n","import './App.css';\nimport Widget from './Widget/Widget';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Widget />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}